<?php
/**
 * @file
 * Gamification Badge Module.
 *
 * This module extends teh achievements module and provides a badge that exemplifies
 * some gamification principles.
 */

 
/**
 * Implements hook_achievements_info().
 */
function gamification_badge_achievements_info() {
  $achievements = array(
    'gamification-badge' => array(
      'title' => t('Gamification Badge'),
      'achievements' => array(
        'join' => array(
         'title' => t('Joined Gamification Badge Group'),
         'description' => t("Beginning the badge"),
         'storage' => 'gamification-badge',
         'points' => 10,
        ),
        'quest-1' => array(
         'title' => t('Gamification Badge: Quest #1'),
         'description' => t("Games are Everywhere"),
         'storage' => 'gamification-badge',
         'points' => 10,
        ),
        'quest-2' => array(
          'title' => t('Gamification Badge: Quest #2'),
          'description' => t('Gamification Defined'),
          'storage' => 'gamification-badge',
          'points' => 10,
        ),
        'quest-3' => array(
          'title' => t('Gamification Badge: Quest #3'),
          'description' => t('Games in Practice'),
          'storage' => 'gamification-badge',
          'points' => 10,
        ),
        'badge' => array(
          'title' => t('Gamification Badge'),
          'description' => t('All Quests Complete'),
          'storage' => 'gamification-badge',
          'points' => 10,
        )
      ),
    ),
  );
  return $achievements;
}

/**
* Create Rules Event().
*/
function gamification_badge_achievements_unlocked($achievement, $uid) {
  if ($uid != 0) {
    $title = $achievement['title'];
    rules_invoke_event('achievements_unlocked_event', $title, $uid);
  }
}

/**
* Create Achievement on OG Membership.
*/
function gamification_badge_og_membership_insert($membership) {
  if ($membership->entity_type == 'user') {
    global $user;
    
    if (!achievements_unlocked_already('join', $user->uid)) {
    //assign the badge-specific points
    $current_count = achievements_storage_get('gamification-badge', $user->uid) + 10;
    achievements_storage_set('gamification-badge', $current_count, $user->uid);
    
    achievements_unlocked('join', $user->uid); //unlock the achivement
    }
  }
}

/**
 * Implements hook_menu().
 */
function gamification_badge_menu() {
   $items = array(
    'badge/gamification' => array(
      'title' => 'Gamification Badge',
      'description' => 'Page for Gamification Badge.',
      'page callback' => 'gamification_badge_page',
      'file' => 'gamification_badge.pages.inc',
      'access callback' => TRUE,
    ),
    
    'badge/gamification/quest-1' => array(
      'title' => 'Gamification Badge: Quest #1',
      'description' => 'Page for Gamification Badge: Quest #1.',
      'page callback' => 'gamification_badge_quest1_page',
      'file' => 'gamification_badge.pages.inc',
      'access callback' => TRUE,
    ), 

    'badge/gamification/quest-2' => array(
      'title' => 'Gamification Badge: Quest #2',
      'description' => 'Page for Gamification Badge: Quest #2.',
      'page callback' => 'gamification_badge_quest2_page',
      'file' => 'gamification_badge.pages.inc',
      'access callback' => TRUE,
    ),
    
    'badge/gamification/quest-3' => array(
      'title' => 'Gamification Badge: Quest #3',
      'description' => 'Page for Gamification Badge: Quest #3.',
      'page callback' => 'gamification_badge_quest3_page',
      'file' => 'gamification_badge.pages.inc',
      'access callback' => TRUE,
    ),
    
    'badge/gamification/quest-final' => array(
      'title' => 'Earn the Gamification Badge',
      'description' => 'Page for Final Gamification Page Quest.',
      'page callback' => 'gamification_badge_questfinal_page',
      'file' => 'gamification_badge.pages.inc',
      'access callback' => TRUE,
    ),    
  );
  
  return $items;
}

function gamification_badge_quest1_form($form, $form_state) {
  $form = array();

  $form['question-1'] = array(
    '#type' => 'radios',
    '#title' => t('Which types of semi-conscious games does the narrator play?'),
    '#options' => array(
      'option1' => t('Balance games'),
      'option2' => t('Fastest Speed'),
      'option3' => t('Jump and Touch'),
      'option4' => t('Countdown'),
      'option5' => t('All of the above'),
    ),
    '#description' => t('Select the most appropriate answer.'),
    '#required' => TRUE,
  );

    $form['question-2'] = array(
    '#type' => 'textarea',
    '#title' => t('Challenge: What kinds of typical mundane activities do you
                  make into games?'),
    '#description' => t('Your answer will be submitted to the discussion board.'),
    '#required' => TRUE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Your Responses'),
    '#prefix' => '<div class="form-item form-submit">',
    '#suffix' => '</div>'
    );

  return $form;
}

function gamification_badge_quest2_form($form, $form_state) {
  $form = array();

  $form['question-1'] = array(
    '#type' => 'radios',
    '#title' => t('How can we make some workplace or school activities more
      engaging through gamification?'),
    '#options' => array(
      'option1' => t('Use progress bars that show how close you are to
        achieving a given goal'),
      'option2' => t('Offer achievement token or digital badges for
        meeting a goal'),
      'option3' => t('Integrate games into work or school experiences'),
      'option4' => t('Improve overall aesthetics'),
      'option5' => t('All of the above'),
    ),
    '#description' => t('Select the most appropriate answer.'),
    '#required' => TRUE,
  );
    
  $form['question-2'] = array(
    '#type' => 'textarea',
    '#title' => t('Challenge: What questions does the explanation of
      gamification presented in the video raise for you? Pose at
      least 1 question to our expert.'),
    '#description' => t('Your question will be answered by one of our
      gamification experts'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Your Question'),
  );
  
    return $form;
}

function gamification_badge_quest1_form_submit($form, &$form_state) {
  global $user;
  
  //even though acheivement_unlocks checks, we need to check so that
  //storage is not invoked
  if (!achievements_unlocked_already('quest-1', $user->uid)) {
    //assign the badge-specific points
    $current_count = achievements_storage_get('gamification-badge', $user->uid) + 10;
    achievements_storage_set('gamification-badge', $current_count, $user->uid);
    
    achievements_unlocked('quest-1', $user->uid); //unlock the achivement
    
    /* Not going to do this anymore
    //check if the storage is at 30 and unlock the badge
    if (achievements_storage_get('gamification-badge', $user->uid) == 30) {
      achievements_unlocked('badge', $user->uid); //unlock the achivement
    }
    */
  }
    
  $form_state['redirect'] = 'badge/gamification';
}

function gamification_badge_quest2_form_submit($form, &$form_state) {
  global $user;
  
  //even though acheivement_unlocks checks, we need to check so that
  //storage is not invoked
  if (!achievements_unlocked_already('quest-2', $user->uid)) {
    //assign the badge-specific points
    $current_count = achievements_storage_get('gamification-badge', $user->uid) + 10;
    achievements_storage_set('gamification-badge', $current_count, $user->uid);
    
    achievements_unlocked('quest-2', $user->uid); //unlock the achivement
    
    /* Not going to do this anymore
    //check if the storage is at 30 and unlock the badge
    if (achievements_storage_get('gamification-badge', $user->uid) == 30) {
      achievements_unlocked('badge', $user->uid); //unlock the achivement
    }
    */
  }
    
  $form_state['redirect'] = 'badge/gamification';
}

/**
 * Implementation of hook_form_alter()
 */

function gamification_badge_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'resource_node_form' && current_path() == 'badge/gamification/quest-3') {
    
    $form['question-1'] = array(
      '#type' => 'radios',
      '#title' => t('Which of the following is NOT an example of a game mechanic?'),
      '#options' => array(
        'option1' => t('Points'),
        'option2' => t('Downloadable resources'),
        'option3' => t('Badges'),
        'option4' => t('Levels'),
        'option5' => t('Leaderboards'),
      ),
      '#description' => t('Select the most appropriate answer.'),
      '#required' => TRUE,
      '#weight' => '20',
    );
    
    $form['explanation-text'] = array(
      '#type' => 'markup',
      '#markup' => '<p>' . t('Find at least one example of how gamification
        principles are being applied in another organization. Describe how
        they are using it in a sentence or two. If possible, include a link
        to the website so we can all see it in action!') . '</p>
        <p>' . t('Your response will be submitted to the') .
          '<a href="/resource-library"> ' . t('Resource Library') .
          '</a>' . t('.') . '</p>',
      '#weight' => '25',
    );
    $form['title']['#weight'] = '29';
    unset($form['actions']['preview']);
    $form['actions']['submit']['#value'] = 'Add Your Resource';
    $form['actions']['submit']['#submit'][] = 'gamification_badge_resource_node_form_finish_redirect';
    
  }
  if ($form_id == 'discussion_topic_node_form' && current_path() == 'badge/gamification/quest-final') {
    $form['group_audience']['und']['#default_value'] = '1';
    unset($form['actions']['preview']);
    $form['actions']['submit']['#value'] = 'Add to the Discussion';
    $form['actions']['submit']['#submit'][] = 'gamification_badge_discussion_topic_node_form_finish_redirect';
    //$form['actions']['submit']['#submit'][] = 'gamification_badge_discussion_topic_node_presave';
  }
}

function gamification_badge_resource_node_form_finish_redirect($form, &$form_state) {
  global $user;
  
  //even though acheivement_unlocks checks, we need to check so that
  //storage is not invoked
  if (!achievements_unlocked_already('quest-3', $user->uid)) {
    //assign the badge-specific points
    $current_count = achievements_storage_get('gamification-badge', $user->uid) + 10;
    achievements_storage_set('gamification-badge', $current_count, $user->uid);
    
    achievements_unlocked('quest-3', $user->uid); //unlock the achivement
    
    /* Not going to do this anymore
     * //check if the storage is at 30 and unlock the badge
    if (achievements_storage_get('gamification-badge', $user->uid) == 30) {
      achievements_unlocked('badge', $user->uid); //unlock the achivement
    }
    */
  }
  $form_state['redirect'] = 'badge/gamification';
}

function gamification_badge_discussion_topic_node_form_finish_redirect($form, &$form_state) {
  global $user;
  
  //even though acheivement_unlocks checks, we need to check so that
  //storage is not invoked
  if (!achievements_unlocked_already('badge', $user->uid)) {
    //assign the badge-specific points
    $current_count = achievements_storage_get('gamification-badge', $user->uid) + 10;
    achievements_storage_set('gamification-badge', $current_count, $user->uid);    
    achievements_unlocked('badge', $user->uid); //unlock the achivement
  }
  $form_state['redirect'] = 'badge/gamification';
}

/**
 * Implementation of hook_block_info()
 */

function gamification_badge_block_info() {
  $blocks = array();
  $blocks['gamification'] = array(
    'info' => t('Gamification Badge Progress Bar'),
    'cache' => DRUPAL_NO_CACHE, //This changes a lot so no cache
    );

  return $blocks;
}

/**
 * Implementation of hook_block_view()
 */

function gamification_badge_block_view($delta = '') {  
  switch ($delta) {
    case 'gamification':
      $block['subject'] = t('Gamification Badge Progress Bar');

      //collect all settings we need to pass to the theme function
      global $user;
      $storage = achievements_storage_get('gamification-badge', $user->uid); //gets users points

      $block['content'] = theme('gamification_badge_progress_content', array(
        'points' => $storage,
        'size' => '175',
        'unit' => 'Points',
        'max_points' => '50',
        'unit_divisor' => '1',
        )
      );
      
  return $block;
  }
}

/**
 * Implementation of hook theme()
 */

function gamification_badge_theme() {
  return array(
    'gamification_badge_progress_content' => array(
      'variable' => array(
        'points' => NULL,
        'size' => NULL,
        'unit' => NULL,
        'max_points' => NULL,
        'unit_divisior' => NULL,
      ),
    ),
  );
}

/**
 * Theming function for theming the block
 */

function theme_gamification_badge_progress_content($variables) {

  //get all settings
  $points = $variables['points'];
  $max_points = $variables['max_points'];
  $size = $variables['size'];
  $unit = $variables['unit'];
  $unit_divisor = $variables['unit_divisor'];

  $module_path = drupal_get_path('module', 'gamification_badge');
  $full_path = $module_path . '/gamification_badge.css';
  drupal_add_css($full_path);

  //calculate width of green meter bar
  //simple "Cross-multiplicastion" -> http://en.wikipedia.org/wiki/Cross-multiplication
  $width = round(((($points * 100) / $max_points) * $size) / 100);

  //rewrite points/max points with the unit divisor
  if ($unit_divisor > 1) {
    $points = round(($points / $unit_divisor), 2);
    $max_points = round(($max_points / $unit_divisor), 2);
  }

  $id = 'meter_bar';

  $output = '<div class="achievements-progress-bar" id=' . $id . ' style="width:' . $size . 'px;">
                <span class="points-text" style="width:' . $size . 'px;">' . $points . ' ' . $unit . ' /' . $max_points . ' ' . $unit . '</span>
                <div class="points-left-wrapper"  style="width:' . $width . 'px;"><div class="points-left"></div></div>
            </div>';

  return $output;
}

/**
 * Implements hook_user_view().
 */
function gamification_badge_user_view($account, $view_mode) {
  // @TODO: Really need to set a separate module that allows displaying badges, then have this module call it.
  $account->content['my_badges'] = array(
    '#title' => t('My Badges'),
    '#type' => 'user_profile_category',
    '#attributes' => array('class' => array('badges')),
    'weight' => '-5',
  );
  
  if (achievements_unlocked_already('badge', $account->uid)) {
    $account->content['my_badges']['badges'] = array(
        '#type' => 'user_profile_item',
        '#title' => '',
        '#markup' => '<img src = "../' . drupal_get_path('module', 'gamification_badge') . '/images/gamification-badge-150.png" />',
        '#attributes' => array('class' => array('badges')),
      );
  }
}
